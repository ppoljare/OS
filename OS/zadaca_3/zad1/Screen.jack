/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean currentColor;
    static Array screen, twoToThe;
    
    /** Initializes the Screen. */
    function void init() {
        var int i, pow;
        let twoToThe = Array.new(16);
        
        let i = 0;
        let pow = 1;
        while (i < 16) {
            let twoToThe[i] = pow;
            let pow = pow + pow;
            let i = i + 1;
        }
        
        let screen = 16384;
        let currentColor = true;
        return;
    }
    
    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        while (i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }
        
        return;
    }
    
    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b)
    {
        let currentColor = b;
        return;
    }
    
    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, pos;
        
        let address = (32 * y) + (x / 16);
        let value = screen[address];
        
        let pos = x & 15; //x % 16
        
        if (currentColor) {
            let value = value | twoToThe[pos];
        } else {
            let value = value & (~twoToThe[pos]);
        }
        
        let screen[address] = value;
        
        return;
    }
    
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, stepX, stepY;
        
        let dx = x2 - x1;
        let dy = y2 - y1;
        
        do Screen.drawPixel(x1, y1);
        
        if (dy = 0) {
            if (dx > 0) {
                while (a < dx) {
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a + 1;
                }
            } else {
                let dx = -dx;
                while (a < dx) {
                    do Screen.drawPixel(x1 - a, y1);
                    let a = a + 1;
                }
            }
            
            return;
        }
        
        if (dy > 0) {
            if (dx > 0) {
                while (~((a > dx) | (b > dy))) {
                    do Screen.drawPixel(x1+a, y1+b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            } else {
                let dx = -dx;
                while (~((a > dx) | (b > dy))) {
                    do Screen.drawPixel(x1-a, y1+b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }
        } else {
            let dy = -dy;
            if (dx > 0) {
                while (~((a > dx) | (b > dy))) {
                    do Screen.drawPixel(x1+a, y1-b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            } else {
                let dx = -dx;
                while (~((a > dx) | (b > dy))) {
                    do Screen.drawPixel(x1-a, y1-b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }
        }
        
        return;
    }
    
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(x1 > x2)) {
            do Screen.drawLine(x1, y1, x1, y2);
            let x1 = x1 + 1;
        }
        return;
    }
    
    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, k, x1, x2, y1;
        
        let dy = -r;
        while (~(dy > r)) {
            let y1 = y + dy;
            
            let k = Math.sqrt((r*r) - (dy*dy));
            let x1 = x - k;
            let x2 = x + k;
            
            do Screen.drawLine(x1, y1, x2, y1);
            let dy = dy + 1;
        }
        
        return;
    }
}